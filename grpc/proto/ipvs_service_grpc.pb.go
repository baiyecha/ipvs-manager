// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: grpc/proto/ipvs_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IpvsListService_IpvsList_FullMethodName = "/ipvs.IpvsListService/IpvsList"
)

// IpvsListServiceClient is the client API for IpvsListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpvsListServiceClient interface {
	// 一个简单的rpc 获取所有的ipvs规则列表,并且会上报自己的ip做心跳
	IpvsList(ctx context.Context, in *IpvsListRequeste, opts ...grpc.CallOption) (*IpvsListResponse, error)
}

type ipvsListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpvsListServiceClient(cc grpc.ClientConnInterface) IpvsListServiceClient {
	return &ipvsListServiceClient{cc}
}

func (c *ipvsListServiceClient) IpvsList(ctx context.Context, in *IpvsListRequeste, opts ...grpc.CallOption) (*IpvsListResponse, error) {
	out := new(IpvsListResponse)
	err := c.cc.Invoke(ctx, IpvsListService_IpvsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpvsListServiceServer is the server API for IpvsListService service.
// All implementations must embed UnimplementedIpvsListServiceServer
// for forward compatibility
type IpvsListServiceServer interface {
	// 一个简单的rpc 获取所有的ipvs规则列表,并且会上报自己的ip做心跳
	IpvsList(context.Context, *IpvsListRequeste) (*IpvsListResponse, error)
	mustEmbedUnimplementedIpvsListServiceServer()
}

// UnimplementedIpvsListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIpvsListServiceServer struct {
}

func (UnimplementedIpvsListServiceServer) IpvsList(context.Context, *IpvsListRequeste) (*IpvsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpvsList not implemented")
}
func (UnimplementedIpvsListServiceServer) mustEmbedUnimplementedIpvsListServiceServer() {}

// UnsafeIpvsListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpvsListServiceServer will
// result in compilation errors.
type UnsafeIpvsListServiceServer interface {
	mustEmbedUnimplementedIpvsListServiceServer()
}

func RegisterIpvsListServiceServer(s grpc.ServiceRegistrar, srv IpvsListServiceServer) {
	s.RegisterService(&IpvsListService_ServiceDesc, srv)
}

func _IpvsListService_IpvsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpvsListRequeste)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpvsListServiceServer).IpvsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpvsListService_IpvsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpvsListServiceServer).IpvsList(ctx, req.(*IpvsListRequeste))
	}
	return interceptor(ctx, in, info, handler)
}

// IpvsListService_ServiceDesc is the grpc.ServiceDesc for IpvsListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpvsListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipvs.IpvsListService",
	HandlerType: (*IpvsListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IpvsList",
			Handler:    _IpvsListService_IpvsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/ipvs_service.proto",
}
